// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace dock_api.Migrations
{
    [DbContext(typeof(DockContext))]
    partial class DockContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Cargo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReceiptNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TruckId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TruckId");

                    b.ToTable("Cargo");
                });

            modelBuilder.Entity("Dock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Slots")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Dock");
                });

            modelBuilder.Entity("Truck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CarrierName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Truck");
                });

            modelBuilder.Entity("TruckOnDock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DockId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Slot")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TruckId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DockId");

                    b.HasIndex("TruckId");

                    b.ToTable("truckOnDocks");
                });

            modelBuilder.Entity("Cargo", b =>
                {
                    b.HasOne("Truck", "Truck")
                        .WithMany("Cargo")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("TruckOnDock", b =>
                {
                    b.HasOne("Dock", "Dock")
                        .WithMany()
                        .HasForeignKey("DockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Truck", "Truck")
                        .WithMany()
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dock");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("Truck", b =>
                {
                    b.Navigation("Cargo");
                });
#pragma warning restore 612, 618
        }
    }
}
